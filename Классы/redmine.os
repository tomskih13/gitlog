#Использовать 1connector
#Использовать json
#Использовать cmdline
#Использовать fs

#Область ОписаниеПеременных

// Параметры запуска
Перем АдресКайтен; // URL Кайтен
Перем АдресРедмайн; // Редмайн URL
Перем ТокенКайтен; // Токен Кайтен
Перем КлючРедмайн; // Редмайн API key
Перем НастройкиИзФайла; // Настройки из файла
Перем НастройкиИзФайлаПользователей; // Настройки из файла пользователей
Перем ИДЗадачиКайтенВх; // ИД | Ссылка задачи Кайтен из входных параметров

// Настройки из файла
Перем ИДКолонокКайтен; // Массив ID колонок Кайтен для обработки
Перем ИДКолонокДляОбработки; // Структура ID колонок Кайтен для обработки по статусам
Перем УсловияДляОбработкиПереноса; // Условия для обработки переноса задач Кайтен
Перем ПользовательскиеПоляКайтен; // Пользовательские поля Кайтен
Перем ИДПроектаРедмайн; // ИД проекта Редмайн
Перем ИДНовогоСтатусаРедмайн; // ИД нового статуса Редмайн
Перем ПриоритетРедмайнПоУмолчанию; // Приоритет Редмайн по-умолчанию
Перем СоответствиеТеговКайтенПриоритетамРедмайн; // Соответствие тегов Кайтен приоритетам Редмайн
Перем КатегорииРедмайн; // Категории Редмайн
Перем ИДПользователяРедмайнДляНазначения; // ИД пользователя Редмайн для назначения
Перем ПользовательскиеПоляРедмайн; // Пользовательские поля Редмайн
Перем СоответствиеТиповЗадачКайтенРедмайнТрекерам; // Соответствие типов задач Кайтен Редмайн трекерам
Перем АдресСозданияЗадачиРедмайн; // Адрес создания задачи Редмайн

// Настройки из файла пользователей
Перем ПользователиРедмайн; // Пользователи Редмайн
Перем СоответствиеПользователейКайтенИРедмайн; // Соответствие пользователей Кайтен и Редмайн

Перем ПользователиКайтен; // Таблица пользователей Кайтен
Перем ТаблицаВерсийРедмайн; // Таблица версий Редмайн
Перем ТаблицаСоответствияПользователей; // Таблица соответствия пользователей Кайтен и Редмайн

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура Инициализировать(Знач АргументыКоманднойСтроки) Экспорт
	
	ДобавитьВЛог("Инициализация настроек...");
	
	ПараметрыКоманднойСтроки = ИнициализироватьПарсер(АргументыКоманднойСтроки);
	ИнициализироватьПараметрыЗапуска(ПараметрыКоманднойСтроки);
	ИнициализироватьТаблицы();
	
	ДобавитьВЛог("Инициализация настроек завершена");
	
КонецПроцедуры

Процедура СоздатьОбработатьЗадачиРедмайн() Экспорт
	
	ДанныеДляОбработки = Новый Структура();
	
	Если ЗначениеЗаполнено(ИДЗадачиКайтенВх) Тогда
		
		ОбработатьСсылкуЗадачиКайтен(ИДЗадачиКайтенВх);
		ДобавитьВЛог("Включен режим отправки одной задачи", ИДЗадачиКайтенВх);
		ЗадачиКайтен = Новый Массив();
		ТекущаяЗадача = Новый Соответствие();
		ТекущаяЗадача.Вставить("id", ИДЗадачиКайтенВх);
		ЗадачиКайтен.Добавить(ТекущаяЗадача);
		
		СоздатьОбработатьЗадачиРедмайнПоКолонкеКайтен(0, ЗадачиКайтен, ДанныеДляОбработки, Истина);
		
	Иначе
		
		Для Каждого КлючИЗначение Из ИДКолонокДляОбработки Цикл
			ДанныеДляОбработки.Вставить(КлючИЗначение.Ключ, Новый Массив());
		КонецЦикла;
		
		ДобавитьВЛог("Включен режим обработки колонок");
		
		Для Каждого ИДКолонкиКайтен Из ИДКолонокКайтен Цикл
			
			ДобавитьВЛог("Получение задач...", , ИДКолонкиКайтен);
			ЗадачиКайтен = ЗадачиКолонкиКайтен(ИДКолонкиКайтен);
			Если ЗадачиКайтен.Количество() = 0 Тогда
				ДобавитьВЛог("Нет задач для обработки", , ИДКолонкиКайтен);
				Продолжить;
			КонецЕсли;
			
			СоздатьОбработатьЗадачиРедмайнПоКолонкеКайтен(ИДКолонкиКайтен, ЗадачиКайтен, ДанныеДляОбработки);
			
		КонецЦикла;
		
		ВыполнитьОбновлениеКолонокЗадачКайтен(ДанныеДляОбработки);
		
		ДобавитьВЛог("Обработка колонок завершена");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбработатьЗадачиРедмайнПоКолонкеКайтен(ИДКолонкиКайтен, ЗадачиКайтен, ДанныеДляОбработки, ТребуетсяСоздание = Ложь)
	
	ДобавитьВЛог("Обработка задач...", , ИДКолонкиКайтен);
	
	Для Каждого ЗадачаКайтен Из ЗадачиКайтен Цикл
		
		ИДЗадачи = ЗадачаКайтен.Получить("id");
		ПолнаяЗадачаКайтен = ДанныеЗадачиКайтен(ИДЗадачи);
		ДополнитьДанныеЗадачиКайтен(ПолнаяЗадачаКайтен);
		
		Приостановить(3000);
		
		НомерЗадачиРедмайн = ПолнаяЗадачаКайтен.Получить("НомерЗадачиРедмайн");
		Если НомерЗадачиРедмайн <> Неопределено Тогда
			ОбработатьСозданнуюЗадачуРедмайн(НомерЗадачиРедмайн, ПолнаяЗадачаКайтен, ДанныеДляОбработки, ИДКолонкиКайтен);
		Иначе
			Если ТребуетсяСоздание = Истина Тогда
				СоздатьЗадачуРедмайн(ПолнаяЗадачаКайтен, ИДКолонкиКайтен);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВЛог("Обработка задач завершена", , ИДКолонкиКайтен);
	
КонецПроцедуры

Процедура ОбработатьСозданнуюЗадачуРедмайн(НомерЗадачиРедмайн, ЗадачаКайтен, ДанныеДляОбработки, ИДКолонкиКайтен)
	
	ИДЗадачиКайтен	= ЗадачаКайтен.Получить("id");
	ШаблонЗапроса	= "%1/issues/%2.json";
	АдресЗапроса	= СтрШаблон(ШаблонЗапроса, АдресРедмайн, НомерЗадачиРедмайн);
	
	Ответ			= ОтправитьЗапросВРедмайн(АдресЗапроса, "GET");
	ЗадачаРедмайн	= Ответ.Получить("issue");
	Если ЗадачаРедмайн = Неопределено Тогда
		ДобавитьВЛог("Не удалось получить данные задачи Редмайн", ИДЗадачиКайтен, ИДКолонкиКайтен);
		Возврат;
	КонецЕсли;
	
	СтатусЗадачиРедмайн		= ЗадачаРедмайн.Получить("status");
	ИДСтатусаЗадачиРедмайн	= 0;
	Если СтатусЗадачиРедмайн <> Неопределено Тогда
		ИДСтатусаЗадачиРедмайн = СтатусЗадачиРедмайн.Получить("id"); // rmStatusId
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИДСтатусаЗадачиРедмайн) Тогда
		ДобавитьВЛог("Не удалось получить статус задачи Редмайн", ИДЗадачиКайтен, ИДКолонкиКайтен);
		Возврат;
	КонецЕсли;
	
	КолонкаЗадачиКайтен = ЗадачаКайтен.Получить("column_id");
	
	НазначенаНа = ЗадачаРедмайн.Получить("assigned_to");
	ИДНазначенаНа = 0;
	Если НазначенаНа <> Неопределено Тогда
		ИДНазначенаНа = НазначенаНа.Получить("id");
	КонецЕсли;
	
	custom_fields				= ЗадачаРедмайн.Получить("custom_fields");
	СтруктураИДПолей			= ЗаполнитьЗначенияИДПользовательскихПолейДляОбработкиУсловий(custom_fields);
	ИДФА						= СвойствоСтруктуры(СтруктураИДПолей, "ИДФА"						, 0);
	ИДОтветственныйАналитик		= СвойствоСтруктуры(СтруктураИДПолей, "ИДОтветственныйАналитик"		, 0);
	ИДОтветственныйРазработчик	= СвойствоСтруктуры(СтруктураИДПолей, "ИДОтветственныйРазработчик"	, 0);
	ИДТестировщик				= СвойствоСтруктуры(СтруктураИДПолей, "ИДТестировщик"				, 0);
	ИДТАПодрядчик				= СвойствоСтруктуры(СтруктураИДПолей, "ИДТАПодрядчик"				, 0);
	ИДФАПодрядчик				= СвойствоСтруктуры(СтруктураИДПолей, "ИДФАПодрядчик"				, 0);
	ИДОтветственныйАналитикП	= СвойствоСтруктуры(СтруктураИДПолей, "ИДОтветственныйАналитикП"	, 0);
	
	Для Каждого КлючИЗначение Из УсловияДляОбработкиПереноса Цикл
		
		КлючКолонкиДляПереноса	= КлючИЗначение.Ключ;
		МассивУсловий			= КлючИЗначение.Значение;
		
		УсловиеВыполняется = Ложь;
		Для Каждого Условие Из МассивУсловий Цикл
			
			rmStatusId = Условие.Получить("rmStatusId");
			Если rmStatusId <> ИДСтатусаЗадачиРедмайн Тогда
				Продолжить;
			Иначе
				УсловиеВыполняется = Истина;
			КонецЕсли;
			
			notKColumnId = Условие.Получить("notKColumnId");
			Если notKColumnId <> Неопределено Тогда
				УсловиеВыполняется = УсловиеВыполняется = Истина И notKColumnId <> КолонкаЗадачиКайтен;
			КонецЕсли;
			
			kColumnId = Условие.Получить("kColumnId");
			Если kColumnId <> Неопределено Тогда
				УсловиеВыполняется = УсловиеВыполняется = Истина И kColumnId = КолонкаЗадачиКайтен;
			КонецЕсли;
			
			analiticsAssigned = Условие.Получить("analiticsAssigned");
			Если analiticsAssigned = Истина Тогда
				УсловиеВыполняется = УсловиеВыполняется = Истина
					И (ИДНазначенаНа = ИДФА
					ИЛИ ИДНазначенаНа = ИДФАПодрядчик
					ИЛИ ИДНазначенаНа = ИДОтветственныйАналитик
					ИЛИ ИДНазначенаНа = ИДОтветственныйАналитикП
					ИЛИ ИДНазначенаНа = ИДТестировщик);
			КонецЕсли;
			
			devAssigned = Условие.Получить("devAssigned");
			Если devAssigned = Истина Тогда
				УсловиеВыполняется = УсловиеВыполняется = Истина И ИДНазначенаНа = ИДОтветственныйРазработчик;
			КонецЕсли;
			
			devTAAssigned = Условие.Получить("devTAAssigned");
			Если devTAAssigned = Истина Тогда
				УсловиеВыполняется = УсловиеВыполняется = Истина
					И (ИДНазначенаНа = ИДОтветственныйРазработчик ИЛИ ИДНазначенаНа = ИДТАПодрядчик);
			КонецЕсли;
			
		КонецЦикла;
		
		Если УсловиеВыполняется = Истина Тогда
			ДобавитьВЛог("Требуется обработка", ИДЗадачиКайтен, ИДКолонкиКайтен);
			ДанныеДляОбработки[КлючКолонкиДляПереноса].Добавить(ИДЗадачиКайтен);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьЗначенияИДПользовательскихПолейДляОбработкиУсловий(custom_fields)
	
	Результат = Новый Структура();
	Результат.Вставить("ИДФА"						, 0);
	Результат.Вставить("ИДОтветственныйАналитик"	, 0);
	Результат.Вставить("ИДОтветственныйРазработчик"	, 0);
	Результат.Вставить("ИДТестировщик"				, 0);
	Результат.Вставить("ИДТАПодрядчик"				, 0);
	Результат.Вставить("ИДФАПодрядчик"				, 0);
	Результат.Вставить("ИДОтветственныйАналитикП"	, 0);
	
	Если custom_fields = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого Поле Из custom_fields Цикл
		
		ЭтоПолеФА = Поле.Получить("id") <> Неопределено И Поле.Получить("id") = 2;
		Если ЭтоПолеФА = Истина Тогда
			ЗаполнитьЗначениеИДПользовательскогоПоля(Поле, Результат.ИДФА);
			Продолжить;
		КонецЕсли;
		
		ЭтоПолеОтвАналитик = Поле.Получить("id") <> Неопределено И Поле.Получить("id") = 10;
		Если ЭтоПолеОтвАналитик = Истина Тогда
			ЗаполнитьЗначениеИДПользовательскогоПоля(Поле, Результат.ИДОтветственныйАналитик);
			Продолжить;
		КонецЕсли;
		
		ЭтоПолеОтвРазработчик = Поле.Получить("id") <> Неопределено И Поле.Получить("id") = 19;
		Если ЭтоПолеОтвРазработчик = Истина Тогда
			ЗаполнитьЗначениеИДПользовательскогоПоля(Поле, Результат.ИДОтветственныйРазработчик);
			Продолжить;
		КонецЕсли;
		
		ЭтоПолеТестировщик = Поле.Получить("id") <> Неопределено И Поле.Получить("id") = 50;
		Если ЭтоПолеТестировщик = Истина Тогда
			ЗаполнитьЗначениеИДПользовательскогоПоля(Поле, Результат.ИДТестировщик);
			Продолжить;
		КонецЕсли;
		
		ЭтоПолеТАПодрядчик = Поле.Получить("id") <> Неопределено И Поле.Получить("id") = 7;
		Если ЭтоПолеТАПодрядчик = Истина Тогда
			ЗаполнитьЗначениеИДПользовательскогоПоля(Поле, Результат.ИДТАПодрядчик);
			Продолжить;
		КонецЕсли;
		
		ЭтоПолеФАПодрядчик = Поле.Получить("id") <> Неопределено И Поле.Получить("id") = 8;
		Если ЭтоПолеФАПодрядчик = Истина Тогда
			ЗаполнитьЗначениеИДПользовательскогоПоля(Поле, Результат.ИДФАПодрядчик);
			Продолжить;
		КонецЕсли;
		
		ЭтоПолеАналитикПодрядчик = Поле.Получить("id") <> Неопределено И Поле.Получить("id") = 11;
		Если ЭтоПолеАналитикПодрядчик = Истина Тогда
			ЗаполнитьЗначениеИДПользовательскогоПоля(Поле, Результат.ИДОтветственныйАналитикП);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ОтправитьЗапросВКайтен(URL, ТипЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Структура();
	КонецЕсли;
	
	ТипЗапроса = ВРег(ТипЗапроса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"	, "application/json");
	Заголовки.Вставить("Accept"			, "application/json");
	Заголовки.Вставить("Authorization"	, "Bearer " + ТокенКайтен);
	
	ПараметрыЗапроса.Вставить("МаксимальноеКоличествоПовторов", 3);
	
	Попытка
		Если ТипЗапроса = "GET" Тогда
			Ответ = КоннекторHTTP.Get(URL, ПараметрыЗапроса, Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "POST" Тогда	
			Ответ = КоннекторHTTP.Post(URL, , ПараметрыЗапроса , Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "PATCH" Тогда	
			Ответ = КоннекторHTTP.Patch(URL, , Новый Структура("Заголовки, Json", Заголовки, ПараметрыЗапроса)).Json();	
		Иначе 
			ВызватьИсключение ("Некорректный тип Rest запроса");
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ОтправитьЗапросВРедмайн(URL, ТипЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Структура;	
	КонецЕсли;
	
	ТипЗапроса = ВРег(ТипЗапроса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"		, "application/json");
	Заголовки.Вставить("Accept"				, "application/json");
	Заголовки.Вставить("X-Redmine-API-Key"	, КлючРедмайн);
	
	Попытка
		Если ТипЗапроса = "GET" Тогда
			Ответ = КоннекторHTTP.Get(URL, ПараметрыЗапроса, Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "POST" Тогда	
			Ответ = КоннекторHTTP.Post(URL, , ПараметрыЗапроса , Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "PUT" Тогда	
			Ответ = КоннекторHTTP.Put(URL, , ПараметрыЗапроса , Новый Структура("Заголовки", Заголовки)).Json();
		ИначеЕсли ТипЗапроса = "PATCH" Тогда	
			Ответ = КоннекторHTTP.Patch(URL, , Новый Структура("Заголовки, Json", Заголовки, ПараметрыЗапроса)).Json();	
		Иначе 
			ВызватьИсключение ("Некорректный тип Rest запроса");
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЗадачуРедмайн(ЗадачаКайтен, ИДКолонкиКайтен = Неопределено)
	
	ИДЗадачиКайтен = ЗадачаКайтен.Получить("id");
	Вложения = ЗадачаКайтен.Получить("attachments");
	Если Вложения <> Неопределено Тогда
		ДобавитьВЛог("Предварительная обработка вложений", ИДЗадачиКайтен, ИДКолонкиКайтен);
		ОбработатьВложенияЗадачиКайтен(ЗадачаКайтен, Вложения);
	КонецЕсли;
	
	ДанныеЗадачиРедмайн = СформироватьДанныеЗадачи(ЗадачаКайтен);
	
	РезультатПроверки = ПроверитьСформированныеДанныеЗадачиРедмайн(ДанныеЗадачиРедмайн);
	Если РезультатПроверки.Результат = Ложь Тогда
		ТекстОшибки = СтрШаблон("Некорректно сформированы данные для запроса в Редмайн: %1", РезультатПроверки.ТекстОшибки);
		ДобавитьВЛог(ТекстОшибки, ИДЗадачиКайтен, ИДКолонкиКайтен);
		Возврат;
	КонецЕсли;
	
	РезультатСоздания = ОтправитьЗапросВРедмайн(АдресСозданияЗадачиРедмайн, "POST", ДанныеЗадачиРедмайн);
	ОшибкиСоздания = РезультатСоздания.Получить("errors");
	Если ОшибкиСоздания <> Неопределено Тогда
		ТекстОшибок = СтрСоединить(ОшибкиСоздания, Символы.ПС);
		ТекстОшибки = СтрШаблон("Выполнение http-запроса завершилось с ошибками:%1%2", Символы.ПС, ТекстОшибок);
		ДобавитьВЛог(ТекстОшибки, ИДЗадачиКайтен, ИДКолонкиКайтен);	
		Возврат;
	КонецЕсли;
	ДанныеНовойЗадачи = РезультатСоздания.Получить("issue");
	ИДНовойЗадачи = Неопределено;
	Если ДанныеНовойЗадачи = Неопределено Тогда
		ТекстОшибки = "Непредвиденная ошибка, http-запрос выполнен, данные задачи Редмайн не получены!";
		ДобавитьВЛог(ТекстОшибки, ИДЗадачиКайтен, ИДКолонкиКайтен);
		Возврат;
	Иначе
		ИДНовойЗадачи = ДанныеНовойЗадачи.Получить("id");
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон("Успешно создана задача по адресу %1/issues/%2", АдресРедмайн, ИДНовойЗадачи);
	ДобавитьВЛог(ТекстСообщения, ИДЗадачиКайтен, ИДКолонкиКайтен);
	
	РезультатОбновленияЗадачиКайтен = ОтправитьНомерЗадачиРедмайнВКайтен(ИДЗадачиКайтен, ИДНовойЗадачи);
	РезультатПроверки = ПроверитьРезультатОбновленияНомераЗадачиРедмайнВКайтен(РезультатОбновленияЗадачиКайтен);
	Если РезультатПроверки.Результат = Ложь Тогда
		ТекстОшибки = СтрШаблон("Не удалось обновить номер задачи Редмайн в задаче Кайтен: %1", РезультатПроверки.ТекстОшибки);
		ДобавитьВЛог(ТекстОшибки, ИДЗадачиКайтен, ИДКолонкиКайтен);
	Иначе
		ДобавитьВЛог("Номер задачи Редмайн обновлен", ИДЗадачиКайтен, ИДКолонкиКайтен);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСсылкуЗадачиКайтен(ИДЗадачиКайтенВх)
	
	Если СтрНайти(НРег(ИДЗадачиКайтенВх), "http") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеАдреса	 = КоннекторHTTP.РазобратьURL(ИДЗадачиКайтенВх);
	ПутьНаСервере	 = ДанныеАдреса.Путь;
	МассивЧастейПути = СтрРазделить(ПутьНаСервере, "/", Ложь);
	ИДЗадачиКайтенВх = МассивЧастейПути[МассивЧастейПути.ВГраница()];
	
КонецПроцедуры

Функция ДанныеЗадачиКайтен(ИДЗадачиКайтен)
	
	АдресЗапроса = СтрШаблон("%1/api/latest/cards/%2", АдресКайтен, ИДЗадачиКайтен);
	ДанныеЗадачи = ОтправитьЗапросВКайтен(АдресЗапроса, "GET");
	
	Возврат ДанныеЗадачи;
	
КонецФункции

Функция ВложенияЗадачиКайтен(ИДЗадачиКайтен)
	
	АдресЗапроса = СтрШаблон("%1/api/latest/cards/%2/files", АдресКайтен, ИДЗадачиКайтен);
	ВложенияЗадачи = ОтправитьЗапросВКайтен(АдресЗапроса, "GET");
	ДобавитьДополнительныеАдресаВложенийКайтен(ВложенияЗадачи);
	
	Возврат ВложенияЗадачи;
	
КонецФункции

Процедура ДобавитьДополнительныеАдресаВложенийКайтен(Вложения)
	
	ШаблонАдреса = "https://files.kaiten.ru/%1";
	Для Каждого Вложение Из Вложения Цикл
		
		ВнутреннийАдрес		= Вложение.Получить("url");
		ПозицияСлеша		= СтрНайти(ВнутреннийАдрес, "/", НаправлениеПоиска.СКонца);
		Если ПозицияСлеша = 0 Тогда
			Вложение.Вставить("extUrl", Неопределено);
			Продолжить;
		КонецЕсли;
		
		ВнутреннееИмяФайла	= Сред(ВнутреннийАдрес, ПозицияСлеша + 1, СтрДлина(ВнутреннийАдрес) - ПозицияСлеша);
		extUrl				= СтрШаблон(ШаблонАдреса, ВнутреннееИмяФайла);
		Вложение.Вставить("extUrl", extUrl);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьВложенияЗадачиКайтен(ЗадачаКайтен, Вложения)
	
	ИДЗадачиКайтен				= ЗадачаКайтен.Получить("id");
	ФункциональныеТребования	= ЗадачаКайтен.Получить("ФункциональныеТребования");
	ТребованияРазработки		= ЗадачаКайтен.Получить("ТребованияРазработки");
	Сценарий					= ЗадачаКайтен.Получить("Сценарий");
	
	МассивПроверяемыхБлоковОписания = Новый Массив();
	МассивПроверяемыхБлоковОписания.Добавить(ФункциональныеТребования);
	МассивПроверяемыхБлоковОписания.Добавить(ТребованияРазработки);
	МассивПроверяемыхБлоковОписания.Добавить(Сценарий);
	
	МассивНеобходимыхВложений = Новый Массив();
	Для Каждого Вложение Из Вложения Цикл
		ДобавитьАдресВложенияВМассивНеобходимыхВложений(Вложение, МассивПроверяемыхБлоковОписания, МассивНеобходимыхВложений);
	КонецЦикла;
	
	Если МассивНеобходимыхВложений.Количество() = 0 Тогда
		ДобавитьВЛог("Не найдено вложений в блоках описания", ИДЗадачиКайтен);
		Возврат;
	КонецЕсли;
	
	ДобавитьВЛог("Предварительная отправка вложений в Редмайн", ИДЗадачиКайтен);
	ФС.ОбеспечитьКаталог("./temp");
	ДобавитьВЛог("Создан каталог temp", ИДЗадачиКайтен);
	
	Загрузки = Новый Массив();
	Для Каждого Вложение Из МассивНеобходимыхВложений Цикл
		СтруктураЗагрузки = ОтправитьВложениеВРедмайн(Вложение, ИДЗадачиКайтен);
		Если СтруктураЗагрузки <> Неопределено Тогда
			Загрузки.Добавить(СтруктураЗагрузки);
		КонецЕсли;
	КонецЦикла;
	
	ФС.УдалитьФайлы("./temp");
	ДобавитьВЛог("Каталог temp очищен", ИДЗадачиКайтен);
	
	Если Загрузки.Количество() > 0 Тогда
		ЗадачаКайтен.Вставить("uploads", Загрузки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьАдресВложенияВМассивНеобходимыхВложений(Вложение, МассивПроверяемыхБлоковОписания, МассивНеобходимыхВложений)
	
	АдресВложения		= Вложение.Получить("url");
	ДругойАдресВложения	= Вложение.Получить("extUrl");
	Если Не ЗначениеЗаполнено(АдресВложения) ИЛИ Не ЗначениеЗаполнено(ДругойАдресВложения) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПроверяемыйБлок Из МассивПроверяемыхБлоковОписания Цикл
		Если СтрНайти(ПроверяемыйБлок, АдресВложения) > 0
			ИЛИ СтрНайти(ПроверяемыйБлок, ДругойАдресВложения) > 0 Тогда
			МассивНеобходимыхВложений.Добавить(Вложение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправитьВложениеВРедмайн(Вложение, ИДЗадачиКайтен)
	
	Результат = Неопределено;
	
	ИмяВыходногоФайла = СкачатьВложениеКайтен(Вложение, ИДЗадачиКайтен);
	Если Не ЗначениеЗаполнено(ИмяВыходногоФайла) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ОтправитьФайлВРедмайн(Вложение, ИДЗадачиКайтен, ИмяВыходногоФайла);
	
	Возврат Результат;
	
КонецФункции

Функция СкачатьВложениеКайтен(Вложение, ИДЗадачиКайтен)
	
	Результат			= "";
	
	ШаблонАдреса		= "https://files.kaiten.ru/%1";
	ВнутреннийАдрес		= Вложение.Получить("url");
	ИмяФайла			= Вложение.Получить("name");
	ИмяВыходногоФайла	= "./temp/" + ИмяФайла;
	ПозицияСлеша		= СтрНайти(ВнутреннийАдрес, "/", НаправлениеПоиска.СКонца);
	Если ПозицияСлеша = 0 Тогда
		ДобавитьВЛог("Не удалось определить адрес файла вложения " + ИмяФайла, ИДЗадачиКайтен);
		Возврат Результат;
	КонецЕсли;
	
	ВнутреннееИмяФайла	= Сред(ВнутреннийАдрес, ПозицияСлеша + 1, СтрДлина(ВнутреннийАдрес) - ПозицияСлеша);
	АдресВложения		= СтрШаблон(ШаблонАдреса, ВнутреннееИмяФайла);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization", "Bearer " + ТокенКайтен);
	ОбъектЗаголовки = Новый Структура("Заголовки", Заголовки);
	
	ДвоичныеДанные = Неопределено;
	Попытка
		Ответ = КоннекторHTTP.Get(АдресВложения, Новый Структура(), ОбъектЗаголовки);
		Если Ответ.КодСостояния >= 200 И Ответ.КодСостояния < 300 Тогда
			ДвоичныеДанные = Ответ.ДвоичныеДанные();
			ДобавитьВЛог("Получены двоичные данные вложения - " + ИмяФайла, ИДЗадачиКайтен);
			ДвоичныеДанные.Записать(ИмяВыходногоФайла);
			ДобавитьВЛог("Записаны двоичные данные вложения - " + ИмяФайла, ИДЗадачиКайтен);
		КонецЕсли;
	Исключение
		ДобавитьВЛог(ОписаниеОшибки(), ИДЗадачиКайтен);
		Возврат Результат;
	КонецПопытки;
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДобавитьВЛог("Не удалось записать двоичные данные файла вложения - " + ИмяФайла, ИДЗадачиКайтен);
		Возврат Результат;
	КонецЕсли;
	
	Результат = ИмяВыходногоФайла;
	Возврат Результат;
	
КонецФункции

Функция ОтправитьФайлВРедмайн(Вложение, ИДЗадачиКайтен, ИмяОтправляемогоФайла)
	
	Результат		= Неопределено;
	
	ИмяФайла		= Вложение.Получить("name");
	localUrl		= Вложение.Получить("url");
	extUrl			= Вложение.Получить("extUrl");
	ШаблонЗапроса	= "%1/uploads.json?filename=%2";
	АдресЗапроса	= СтрШаблон(ШаблонЗапроса, АдресРедмайн, ИмяФайла);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type"		, "application/octet-stream");
	Заголовки.Вставить("X-Redmine-API-Key"	, КлючРедмайн);
	ОбъектЗаголовки = Новый Структура("Заголовки", Заголовки);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяОтправляемогоФайла);
	
	Попытка
		Ответ = КоннекторHTTP.Post(АдресЗапроса, ДвоичныеДанные, Новый Структура(), ОбъектЗаголовки);
		Если Ответ.КодСостояния = 201 Тогда
			ДанныеОтвета = Ответ.Json();
			Загрузка	 = ДанныеОтвета.Получить("upload");
			Токен		 = Неопределено;
			Если Загрузка <> Неопределено Тогда
				Токен	 = Загрузка.Получить("token");
			КонецЕсли;
			Если Токен <> Неопределено Тогда
				Результат = Новый Структура("token, filename, localUrl, extUrl", Токен, ИмяФайла, localUrl, extUrl);
				ДобавитьВЛог("Вложение отправлено в Редмайн - " + ИмяФайла + ", token - " + Токен, ИДЗадачиКайтен);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДобавитьВЛог(ОписаниеОшибки(), ИДЗадачиКайтен);
		Возврат Результат;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьДанныеЗадачиКайтен(ДанныеЗадачи)
	
	ИДТипаКайтен = ДанныеЗадачи.Получить("type_id");
	Если ИДТипаКайтен <> Неопределено Тогда
		tracker_id = СоответствиеТиповЗадачКайтенРедмайнТрекерам.Получить(Строка(ИДТипаКайтен));
		Если tracker_id = 1 Тогда
			ДанныеЗадачи.Вставить("ЗаполнятьНайденоВ", Истина);
		КонецЕсли;
		ДанныеЗадачи.Вставить("tracker_id", tracker_id);
	КонецЕсли;
	
	Описание = ДанныеЗадачи.Получить("description");
	Если Описание <> Неопределено Тогда
		РазобратьОписаниеЗадачиКайтен(ДанныеЗадачи, Описание);
	КонецЕсли;
	
	ИДПриоритета	= ПриоритетРедмайнПоУмолчанию;
	Теги			= ДанныеЗадачи.Получить("tags");
	Для Каждого Тег Из Теги Цикл
		
		ИмяТега = Тег.Получить("name");
		Если ИмяТега = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяТега = "ЧТЗ 12" Тогда
			ДанныеЗадачи.Вставить("ЭтоДепозиты", Истина);
			Продолжить;
		КонецЕсли;
		
		СоответствиеПриоритета = СоответствиеТеговКайтенПриоритетамРедмайн.Получить(ИмяТега);
		Если СоответствиеПриоритета <> Неопределено Тогда
			ИДПриоритета = СоответствиеПриоритета;
		КонецЕсли;
		
	КонецЦикла;
	ДанныеЗадачи.Вставить("priority_id", ИДПриоритета);
	
	// Обработка пользовательских полей, которые могут отсутствовать
	ПользовательскиеПоля = ДанныеЗадачи.Получить("properties");
	Если ПользовательскиеПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКлючейПользователей = Новый Массив();
	МассивКлючейПользователей.Добавить("Разработчик");
	МассивКлючейПользователей.Добавить("Аналитик");
	
	МассивКлючейВерсий = Новый Массив();
	МассивКлючейВерсий.Добавить("ПлановыйРелиз");
	МассивКлючейВерсий.Добавить("ФактическийРелиз");
	
	Для Каждого КлючИЗначение Из ПользовательскиеПоляКайтен Цикл
		
		Если МассивКлючейПользователей.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ДополнитьДанныеЗадачиКайтенПользователями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение);
		ИначеЕсли МассивКлючейВерсий.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ДополнитьДанныеЗадачиКайтенВерсиями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение);
		Иначе
			ПользовательскоеПоле = ПользовательскиеПоля.Получить(КлючИЗначение.Значение);
			Если ПользовательскоеПоле <> Неопределено Тогда
				ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, ПользовательскоеПоле);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработка вложений только для новых задач
	НомерЗадачиРедмайн = ДанныеЗадачи.Получить("НомерЗадачиРедмайн");
	Если НомерЗадачиРедмайн = Неопределено Тогда
		ИДЗадачи = ДанныеЗадачи.Получить("id");
		ВложенияЗадачи = ВложенияЗадачиКайтен(ИДЗадачи);
		Если ВложенияЗадачи.Количество() > 0 Тогда
			ДобавитьВЛог("Получены данные о вложениях", ИДЗадачи);
			ДанныеЗадачи.Вставить("attachments", ВложенияЗадачи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗадачиКайтенПользователями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение)
	
	МассивУИДПользователей = ПользовательскиеПоля.Получить(КлючИЗначение.Значение);
	Если МассивУИДПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокПользователей = Новый Массив();
	Для Каждого УИД Из МассивУИДПользователей Цикл
		Отбор = Новый Структура("uid", УИД);
		ИскомыеСтроки = ПользователиКайтен.НайтиСтроки(Отбор);
		Если ИскомыеСтроки.Количество() > 0 Тогда
			МассивСтрокПользователей.Добавить(ИскомыеСтроки[0]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокПользователей.Количество() > 0 Тогда
		ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, МассивСтрокПользователей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗадачиКайтенВерсиями(ДанныеЗадачи, ПользовательскиеПоля, КлючИЗначение)
	
	ТекущаяВерсия = ПользовательскиеПоля.Получить(КлючИЗначение.Значение);
	Если ТекущаяВерсия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяВерсия	= "1.1." + ТекущаяВерсия; // Текущий формат ведения в кайтен отличается
	Отбор			= Новый Структура("name", ТекущаяВерсия);
	ИскомыеСтроки	= ТаблицаВерсийРедмайн.НайтиСтроки(Отбор);
	Если ИскомыеСтроки.Количество() > 0 Тогда
		ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, ИскомыеСтроки[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура РазобратьОписаниеЗадачиКайтен(ДанныеЗадачи, Знач Описание)
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить(1, Новый Структура("НовыйКлюч, Заголовок", "ФункциональныеТребования", "**Функциональные требования:**"));
	Заголовки.Вставить(2, Новый Структура("НовыйКлюч, Заголовок", "Объекты"					, "**Объект(-ы) системы в пользовательском режиме:**"));
	Заголовки.Вставить(3, Новый Структура("НовыйКлюч, Заголовок", "ТребованияРазработки"	, "**Требования к разработке:**"));
	Заголовки.Вставить(4, Новый Структура("НовыйКлюч, Заголовок", "УсловияОшибок"			, "**Условия выявления ошибок:**"));
	Заголовки.Вставить(5, Новый Структура("НовыйКлюч, Заголовок", "БДОшибки"				, "**БД выявленного замечания/ошибки:**"));
	Заголовки.Вставить(6, Новый Структура("НовыйКлюч, Заголовок", "Сценарий"				, "**Сценарий тестирования:**"));
	
	Разделитель	= "^";
	Описание	= СокрЛП(СтрЗаменить(Описание, Символы.ПС + Символы.ПС, Символы.ПС));
	Для Каждого КлючИЗначение Из Заголовки Цикл
		Описание = СтрЗаменить(Описание, КлючИЗначение.Значение.Заголовок, Разделитель);
	КонецЦикла;
	
	МассивБлоков = СтрРазделить(Описание, Разделитель, Ложь);
	Если МассивБлоков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОписания = Новый Структура();
	Для сч = 0 По МассивБлоков.Количество() - 1 Цикл
		
		ДанныеБлокаОписания = Заголовки.Получить(сч);
		Если ДанныеБлокаОписания = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОписания.Вставить(ДанныеБлокаОписания.НовыйКлюч, СокрЛП(МассивБлоков[сч]));
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтруктураОписания Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ДанныеЗадачи.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТаблицуПользователей(ДанныеПользователей)
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("id"		, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("uid"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	ТЗ.Колонки.Добавить("full_name"	, Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("email"		, Новый ОписаниеТипов("Строка"));
	
	ДобавитьСтрокиТЗПоСоответствию(ТЗ, ДанныеПользователей);
	
	Возврат ТЗ;
	
КонецФункции

Функция СформироватьТаблицуСоответствияПользователей()
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("uid"		, Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
	ТЗ.Колонки.Добавить("redmineId"	, Новый ОписаниеТипов("Строка"));
	
	ДобавитьСтрокиТЗПоСоответствию(ТЗ, СоответствиеПользователейКайтенИРедмайн);
	
	Возврат ТЗ;
	
КонецФункции

Функция СформироватьТаблицуВерсий()
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("id"			, Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("name"			, Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("description"	, Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("status"		, Новый ОписаниеТипов("Строка"));
	
	ШаблонЗапроса	= "%1/projects/%2/versions.json";
	АдресЗапроса	= СтрШаблон(ШаблонЗапроса, АдресРедмайн, ИДПроектаРедмайн);
	
	Ответ			= ОтправитьЗапросВРедмайн(АдресЗапроса, "GET");
	МассивВерсий	= Ответ.Получить("versions");
	
	ДобавитьСтрокиТЗПоСоответствию(ТЗ, МассивВерсий);
	
	Возврат ТЗ;
	
КонецФункции

Функция СформироватьОписаниеЗадачиРедмайн(ДанныеЗадачи)
	
	ФункциональныеТребования	= ДанныеЗадачи.Получить("ФункциональныеТребования");
	ТребованияРазработки		= ДанныеЗадачи.Получить("ТребованияРазработки");
	
	Описание = "";
	Если ФункциональныеТребования <> Неопределено Тогда
		Описание = Описание + ФункциональныеТребования;
	КонецЕсли;
	Если ТребованияРазработки <> Неопределено Тогда
		Описание = Описание + Символы.ПС + ТребованияРазработки;
	КонецЕсли;
	
	Описание = ЗаменитьСсылкиВложенийВОписанииЗадачиРедмайн(Описание, ДанныеЗадачи);
	
	Возврат Описание;
	
КонецФункции

Функция ЗаменитьСсылкиВложенийВОписанииЗадачиРедмайн(Описание, ДанныеЗадачи)
	
	Загрузки = ДанныеЗадачи.Получить("uploads");
	Если Загрузки = Неопределено Тогда
		Возврат Описание;
	КонецЕсли;
	
	Для Каждого Загрузка Из Загрузки Цикл
		
		МассивСсылок = Новый Массив();
		МассивСсылок.Добавить(Загрузка.localUrl);
		МассивСсылок.Добавить(Загрузка.extUrl);
		Для Каждого АдресВложения Из МассивСсылок Цикл
			
			ПозицияСсылки = СтрНайти(Описание, АдресВложения);
			Если ПозицияСсылки = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Так как вложение в Кайтене нет возможности поставить в строке с другим текстом, то имеет смысл найти просто начало строки до ссылки
			// и после ссылки, и заменить полностью строку на необходимый текст вложения в стиле textile
			ПозицияНачалаСтроки	= СтрНайти(Описание, Символы.ПС, НаправлениеПоиска.СКонца, ПозицияСсылки, 1);
			ПозицияКонцаСтроки	= СтрНайти(Описание, Символы.ПС, НаправлениеПоиска.СНачала, ПозицияСсылки, 1);
			
			// Предполагаем, что вложение будет изображением, поэтому будем вставлять изображение
			textileFilename = "!" + Загрузка.filename + "!";
			Если ПозицияНачалаСтроки = 0 Тогда
				Описание = СтрЗаменить(Описание, АдресВложения, textileFilename); // Простая замена ссылки без удаления форматирования markdown
			Иначе
				ЛокальноеОписание = Сред(Описание, 1, ПозицияНачалаСтроки) + textileFilename;
				Если ПозицияКонцаСтроки <> 0 Тогда
					ЛокальноеОписание = ЛокальноеОписание + Сред(Описание, ПозицияКонцаСтроки); // Замена всей строки ссылки на textile форматирование
				КонецЕсли;
				Описание = ЛокальноеОписание;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

Функция СформироватьПользовательскиеПоляРедмайн(ДанныеЗадачи)
	
	МассивПолей = Новый Массив();
	
	Для Каждого Поле Из ПользовательскиеПоляРедмайн Цикл
		
		id = Поле.Получить("id");
		name = Поле.Получить("name");
		value = Поле.Получить("value");
		
		Если ДанныеЗадачи.Получить("ЗаполнятьНайденоВ") = Истина И name = "Найдено в" Тогда
			СтрокиВерсий = ДанныеЗадачи.Получить("ПлановыйРелиз");
			Если СтрокиВерсий <> Неопределено Тогда
				ПлановыйРелиз = СтрокиВерсий.name;
				МассивЧисел = СтрРазделить(ПлановыйРелиз, ".", Ложь);
				ПоследнийИндекс = МассивЧисел.Количество() - 1;
				ПоследнееЧисло = Число(МассивЧисел[ПоследнийИндекс]);
				Если ПоследнееЧисло = 1 Тогда
					МассивЧисел[ПоследнийИндекс - 1] = Строка(Число(МассивЧисел[ПоследнийИндекс - 1]) - 1);
					МассивЧисел[ПоследнийИндекс] = 3;
				Иначе
					МассивЧисел[ПоследнийИндекс] = Строка(Число(МассивЧисел[ПоследнийИндекс]) - 1);
				КонецЕсли;
				versionName = СтрСоединить(МассивЧисел, ".");
				Отбор = Новый Структура("Name", versionName);
				ИскомыеВерсии = ТаблицаВерсийРедмайн.НайтиСтроки(Отбор);
				Если ИскомыеВерсии.Количество() > 0 Тогда
					value = ИскомыеВерсии[0].id;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если name = "Сцен. тестир./воспр. ошибки" Тогда
			Сценарий = ДанныеЗадачи.Получить("Сценарий");
			Если Сценарий <> Неопределено Тогда
				value = ЗаменитьСсылкиВложенийВОписанииЗадачиРедмайн(Сценарий, ДанныеЗадачи);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(value) = Тип("Массив") И value.Количество() = 0 Тогда
			// Определение пользователей для значения
			Если name = "Отв. Разработчик" Тогда
				МассивРазработчиковКайтен = ДанныеЗадачи.Получить("Разработчик");
				Если ТипЗнч(МассивРазработчиковКайтен) = Тип("Массив") И МассивРазработчиковКайтен.Количество() > 0 Тогда
					Отбор = Новый Структура("uid", МассивРазработчиковКайтен[0].uid);
					ИскомыеСтроки = ТаблицаСоответствияПользователей.НайтиСтроки(Отбор);
					Если ИскомыеСтроки.Количество() > 0 Тогда
						value = ИскомыеСтроки[0].redmineId;
					Иначе
						value = "";
					КонецЕсли;
				Иначе
					value = "";
				КонецЕсли;
			КонецЕсли;
			Если name = "Отв. аналитик (подрядчик)" Тогда
				АналитикиКайтен = ДанныеЗадачи.Получить("Аналитик");
				Если  ТипЗнч(АналитикиКайтен) = Тип("Массив") И АналитикиКайтен.Количество() > 0 Тогда
					Отбор = Новый Структура("uid", АналитикиКайтен[0].uid);
					ИскомыеСтроки = ТаблицаСоответствияПользователей.НайтиСтроки(Отбор);
					Если ИскомыеСтроки.Количество() > 0 Тогда
						value = ИскомыеСтроки[0].redmineId;
					Иначе
						value = "";
					КонецЕсли;
				Иначе
					value = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДобавитьПользовательскоеПолеРедмайн(МассивПолей, value, id);
		
	КонецЦикла;
	
	Возврат МассивПолей;
	
КонецФункции

Функция СформироватьВложенияРедмайн(ДанныеЗадачи)
	
	ЗагруженныеВложения = ДанныеЗадачи.Получить("uploads");
	Если ЗагруженныеВложения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Загрузки = Новый Массив();
	Для Каждого Вложение Из ЗагруженныеВложения Цикл
		content_type = ОпределитьMIMEТип(Вложение.filename);
		СтруктураЗагрузки = Новый Структура("token, filename", Вложение.token, Вложение.filename);
		Если content_type <> Неопределено Тогда
			СтруктураЗагрузки.Вставить("content_type", content_type);
		КонецЕсли;
		Загрузки.Добавить(СтруктураЗагрузки);
	КонецЦикла;
	
	Возврат Загрузки;
	
КонецФункции

Процедура ДобавитьПользовательскоеПолеРедмайн(МассивПолей, value, id)
	
	СтруктураПоля = Новый Структура("value, id", value, id);
	МассивПолей.Добавить(СтруктураПоля);
	
КонецПроцедуры

Функция ОпределитьMIMEТип(ИмяФайла)
	
	Тип = Неопределено;
	
	СоответствиеТипов = Новый Соответствие();
    СоответствиеТипов.Вставить("7z", "application/x-7z-compressed");
    СоответствиеТипов.Вставить("pdf", "application/pdf");
    СоответствиеТипов.Вставить("apk", "application/vnd.android.package-archive");
    СоответствиеТипов.Вставить("mp3", "audio/mpeg");
    СоответствиеТипов.Вставить("avi", "video/x-msvideo");
    СоответствиеТипов.Вставить("bmp", "image/bmp");
    СоответствиеТипов.Вставить("css", "text/css");
    СоответствиеТипов.Вставить("csv", "text/csv");
    СоответствиеТипов.Вставить("djvu", "image/vnd.djvu");
    СоответствиеТипов.Вставить("dwg", "image/vnd.dwg");
    СоответствиеТипов.Вставить("epub", "application/epub+zip");
    СоответствиеТипов.Вставить("h261", "video/h261");
    СоответствиеТипов.Вставить("h263", "video/h263");
    СоответствиеТипов.Вставить("h264", "video/h264");
    СоответствиеТипов.Вставить("html", "text/html");
    СоответствиеТипов.Вставить("js", "application/javascript");
    СоответствиеТипов.Вставить("json", "application/json");
    СоответствиеТипов.Вставить("jpeg", "image/x-citrix-jpeg");
    СоответствиеТипов.Вставить("jpg", "image/x-citrix-jpeg");
    СоответствиеТипов.Вставить("pjpeg", "image/pjpeg");
    СоответствиеТипов.Вставить("jpgv", "video/jpeg");
    СоответствиеТипов.Вставить("exe", "application/x-msdownload");
    СоответствиеТипов.Вставить("xls", "application/vnd.ms-excel");
    СоответствиеТипов.Вставить("xlam", "application/vnd.ms-excel.addin.macroenabled.12");
    СоответствиеТипов.Вставить("xlsb", "application/vnd.ms-excel.sheet.binary.macroenabled.12");
    СоответствиеТипов.Вставить("xltm", "application/vnd.ms-excel.template.macroenabled.12");
    СоответствиеТипов.Вставить("xlsm", "application/vnd.ms-excel.sheet.macroenabled.12");
    СоответствиеТипов.Вставить("chm", "application/vnd.ms-htmlhelp");
    СоответствиеТипов.Вставить("pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation");
    СоответствиеТипов.Вставить("sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide");
    СоответствиеТипов.Вставить("ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow");
    СоответствиеТипов.Вставить("potx", "application/vnd.openxmlformats-officedocument.presentationml.template");
    СоответствиеТипов.Вставить("xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    СоответствиеТипов.Вставить("xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template");
    СоответствиеТипов.Вставить("docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
    СоответствиеТипов.Вставить("dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template");
    СоответствиеТипов.Вставить("ppt", "application/vnd.ms-powerpoint");
    СоответствиеТипов.Вставить("ppam", "application/vnd.ms-powerpoint.addin.macroenabled.12");
    СоответствиеТипов.Вставить("sldm", "application/vnd.ms-powerpoint.slide.macroenabled.12");
    СоответствиеТипов.Вставить("pptm", "application/vnd.ms-powerpoint.presentation.macroenabled.12");
    СоответствиеТипов.Вставить("ppsm", "application/vnd.ms-powerpoint.slideshow.macroenabled.12");
    СоответствиеТипов.Вставить("potm", "application/vnd.ms-powerpoint.template.macroenabled.12");
    СоответствиеТипов.Вставить("mpp", "application/vnd.ms-project");
    СоответствиеТипов.Вставить("pub", "application/x-mspublisher");
    СоответствиеТипов.Вставить("wm", "video/x-ms-wm");
    СоответствиеТипов.Вставить("wma", "audio/x-ms-wma");
    СоответствиеТипов.Вставить("wax", "audio/x-ms-wax");
    СоответствиеТипов.Вставить("wmx", "video/x-ms-wmx");
    СоответствиеТипов.Вставить("wmv", "video/x-ms-wmv");
    СоответствиеТипов.Вставить("wvx", "video/x-ms-wvx");
    СоответствиеТипов.Вставить("doc", "application/msword");
    СоответствиеТипов.Вставить("docm", "application/vnd.ms-word.document.macroenabled.12");
    СоответствиеТипов.Вставить("dotm", "application/vnd.ms-word.template.macroenabled.12");
    СоответствиеТипов.Вставить("wps", "application/vnd.ms-works");
    СоответствиеТипов.Вставить("mpeg", "video/mpeg");
    СоответствиеТипов.Вставить("mp4a", "audio/mp4");
    СоответствиеТипов.Вставить("mp4", "video/mp4");
    СоответствиеТипов.Вставить("webm", "video/webm");
    СоответствиеТипов.Вставить("png", "image/x-png");
    СоответствиеТипов.Вставить("rar", "application/x-rar-compressed");
    СоответствиеТипов.Вставить("mxl", "application/vnd.recordare.musicxml");
    СоответствиеТипов.Вставить("rtf", "application/rtf");
    СоответствиеТипов.Вставить("svg", "image/svg+xml");
    СоответствиеТипов.Вставить("tiff", "image/tiff");
    СоответствиеТипов.Вставить("tar", "application/x-tar");
    СоответствиеТипов.Вставить("txt", "text/plain");
    СоответствиеТипов.Вставить("ttf", "application/x-font-ttf");
    СоответствиеТипов.Вставить("wav", "audio/x-wav");
    СоответствиеТипов.Вставить("webp", "image/webp");
    СоответствиеТипов.Вставить("wsdl", "application/wsdl+xml");
    СоответствиеТипов.Вставить("xhtml", "application/xhtml+xml");
    СоответствиеТипов.Вставить("xml", "application/xml");
    СоответствиеТипов.Вставить("xslt", "application/xslt+xml");
    СоответствиеТипов.Вставить("yaml", "text/yaml");
    СоответствиеТипов.Вставить("zip", "application/zip");
	
	ПозицияТочки = СтрНайти(ИмяФайла, ".", НаправлениеПоиска.СКонца);
	Если ПозицияТочки > 0 Тогда
		Расширение = Сред(ИмяФайла, ПозицияТочки + 1);
		Тип = СоответствиеТипов.Получить(Расширение);
	КонецЕсли;
	
	Возврат Тип;
	
КонецФункции

Функция СформироватьДанныеЗадачи(ДанныеЗадачи)
	
	// Creating an issue
	// POST /issues.[format]
	// Parameters:
	
	// issue - A hash of the issue attributes:
		// project_id
		// tracker_id
		// status_id
		// priority_id
		// subject
		// description
		// category_id
		// fixed_version_id - ID of the Target Versions (previously called 'Fixed Version' and still referred to as such in the API)
		// assigned_to_id - ID of the user to assign the issue to (currently no mechanism to assign by name)
		// parent_issue_id - ID of the parent issue
		// custom_fields - See Custom fields
		// watcher_user_ids - Array of user ids to add as watchers (since 2.3.0)
		// is_private - Use true or false to indicate whether the issue is private or not
		// estimated_hours - Number of hours estimated for issue
		// "uploads": [
		//	{"token": "7167.ed1ccdb093229ca1bd0b043618d88743", "filename": "image1.png", "content_type": "image/png"},
		//	{"token": "7168.d595398bbb104ed3bba0eed666785cc6", "filename": "image2.png", "content_type": "image/png"}
		//]
	
	description = СформироватьОписаниеЗадачиРедмайн(ДанныеЗадачи);
	
	custom_fields = СформироватьПользовательскиеПоляРедмайн(ДанныеЗадачи);
	
	uploads = СформироватьВложенияРедмайн(ДанныеЗадачи);
	
	ПараметрыЗапроса = Новый Структура();
	issue = Новый Структура();
	issue.Вставить("project_id"	, ИДПроектаРедмайн);
	issue.Вставить("tracker_id"	, ДанныеЗадачи.Получить("tracker_id"));
	issue.Вставить("status_id"	, ИДНовогоСтатусаРедмайн);
	issue.Вставить("priority_id", ДанныеЗадачи.Получить("priority_id"));
	ЗаголовокЗадачиКайтен = ДанныеЗадачи.Получить("title");
	Если ЗаголовокЗадачиКайтен <> Неопределено Тогда
		ПозицияНомераНавигатора = СтрНайти(ЗаголовокЗадачиКайтен, "]");
		Если ПозицияНомераНавигатора > 0 Тогда
			ЗаголовокЗадачиКайтен = СокрЛП(Сред(ЗаголовокЗадачиКайтен, ПозицияНомераНавигатора + 1, СтрДлина(ЗаголовокЗадачиКайтен)));
		КонецЕсли;
	Иначе
		ЗаголовокЗадачиКайтен = ДанныеЗадачи.Получить("id");
	КонецЕсли;
	issue.Вставить("subject"			, ЗаголовокЗадачиКайтен);
	issue.Вставить("description"		, description);
	Категория = КатегорииРедмайн.Получить("ЕКК2. ФИ (10.2. Кредиты)");
	Если ДанныеЗадачи.Получить("ЭтоДепозиты") = Истина Тогда
		Категория = КатегорииРедмайн.Получить("ЕКК2. ФИ (12 Депозиты)");
	КонецЕсли;
	issue.Вставить("category_id"		, Категория);
	СтрокиВерсий = ДанныеЗадачи.Получить("ПлановыйРелиз");
	Если СтрокиВерсий <> Неопределено Тогда
		issue.Вставить("fixed_version_id"	, СтрокиВерсий.id);
	КонецЕсли;
	issue.Вставить("assigned_to_id"		, ИДПользователяРедмайнДляНазначения);
	issue.Вставить("custom_fields"		, custom_fields);
	Если uploads <> Неопределено Тогда
		issue.Вставить("uploads"		, uploads);
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("issue", issue);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ПроверитьСформированныеДанныеЗадачиРедмайн(ДанныеЗадачиРедмайн)
	
	РезультатПроверки = Новый Структура("Результат, ТекстОшибки", Истина, "");
	
	МассивОшибок = Новый Массив();
	
	description = ДанныеЗадачиРедмайн.issue.description;
	Если Не ЗначениеЗаполнено(description) Тогда
		МассивОшибок.Добавить("Не заполнено поле ""description"" (Описание)");
	КонецЕсли;
	assigned_to_id = ДанныеЗадачиРедмайн.issue.assigned_to_id;
	Если Не ЗначениеЗаполнено(assigned_to_id) Тогда
		МассивОшибок.Добавить("Не заполнено поле ""assigned_to_id"" (Назначена)");
	КонецЕсли;
	custom_fields = ДанныеЗадачиРедмайн.issue.custom_fields;
	Если Не ЗначениеЗаполнено(custom_fields) Тогда
		МассивОшибок.Добавить("Не указаны пользовательские поля задачи");
	КонецЕсли;
	
	Для Каждого Поле Из custom_fields Цикл
		
		Если Поле.id = 3 И Не ЗначениеЗаполнено(Поле.value) Тогда
			МассивОшибок.Добавить("Не указаны блоки задачи");
		КонецЕсли;
		Если Поле.id = 7 И Не ЗначениеЗаполнено(Поле.value) Тогда
			МассивОшибок.Добавить("Не указан ""ТА (подрядчик)""");
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		РезультатПроверки.Результат = Ложь;
		РезультатПроверки.ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ОтправитьНомерЗадачиРедмайнВКайтен(ИДЗадачиКайтен, ИДЗадачиРедмайн)
	
	АдресЗапроса = СтрШаблон("%1/api/latest/cards/%2", АдресКайтен, ИДЗадачиКайтен);
	
	ИДНомера = ПользовательскиеПоляКайтен.Получить("НомерЗадачиРедмайн");
	Если ИДНомера = Неопределено Тогда
		ДобавитьВЛог("Не удалось определить id пользовательского поля кайтен 'Номер задачи Редмайн'", ИДЗадачиКайтен);
		Возврат Неопределено;
	КонецЕсли;
	
	ПользовательскиеПоля = Новый Структура();
	ПользовательскиеПоля.Вставить(ИДНомера, ИДЗадачиРедмайн);
	
	ПараметрыЗапроса = Новый Структура("properties", ПользовательскиеПоля);
	Ответ			 = ОтправитьЗапросВКайтен(АдресЗапроса, "PATCH", ПараметрыЗапроса);
	
	Возврат Ответ;
	
КонецФункции

Функция ПроверитьРезультатОбновленияНомераЗадачиРедмайнВКайтен(РезультатОбновления)
	
	РезультатПроверки = Новый Структура("Результат, ТекстОшибки", Истина, "");
	
	properties = РезультатОбновления.Получить("properties");
	Если properties = Неопределено Тогда
		РезультатПроверки.Результат = Ложь;
		РезультатПроверки.ТекстОшибки = НСтр("ru ='Не удалось получить пользовательские поля Кайтен'");
	Иначе
		ИДНомера = ПользовательскиеПоляКайтен.Получить("НомерЗадачиРедмайн"); // Ранее проверялся
		НомерЗадачиРедмайн = properties.Получить(ИДНомера);
		Если НомерЗадачиРедмайн = Неопределено Тогда
			РезультатПроверки.Результат = Ложь;
			РезультатПроверки.ТекстОшибки = НСтр("ru ='Не удалось получить номер задачи Редмайн'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ЗадачиКолонкиКайтен(ИДКолонки, Знач Лимит = 100, НачатьС = 0)
	
	ДанныеЗадач = Новый Массив();
	
	ПараметрыЗапроса = Новый Структура();	
	ПараметрыЗапроса.Вставить("column_ids"	, ИДКолонки);
	ПараметрыЗапроса.Вставить("archived"	, "false");
	ПараметрыЗапроса.Вставить("limit"		, Лимит);
	
	ВыполнятьЗапрос = Истина;
	
	АдресЗапроса = СтрШаблон("%1/api/latest/cards", АдресКайтен);
	
	Пока ВыполнятьЗапрос = Истина Цикл
		ПараметрыЗапроса.Вставить("offset", НачатьС);
		ПорцияЗадач = ОтправитьЗапросВКайтен(АдресЗапроса, "GET", ПараметрыЗапроса);
		Приостановить(3000);
		Для Каждого ДанныеЗадачи Из ПорцияЗадач Цикл
			ДанныеЗадач.Добавить(ДанныеЗадачи);
		КонецЦикла;
		ВыполнятьЗапрос	= ПорцияЗадач.Количество() > 0;
		НачатьС			= НачатьС + Лимит;
	КонецЦикла;
	
	ДобавитьВЛог("Получено задач Кайтен - " + ДанныеЗадач.Количество(), , ИДКолонки);
	
	Возврат ДанныеЗадач;
	
КонецФункции

Процедура ЗаполнитьЗначениеИДПользовательскогоПоля(Поле, ИД)
	
	ЗначениеПоля = Поле.Получить("value");
	Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
		ИД = Число(Поле.Получить("value"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеКолонокЗадачКайтен(ДанныеДляОбработки)
	
	Для Каждого КлючИЗначение Из ДанныеДляОбработки Цикл
		
		МассивЗадачКайтен = КлючИЗначение.Значение;
		Если МассивЗадачКайтен.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИДКолонкиПереноса = ИДКолонокДляОбработки.Получить(КлючИЗначение.Ключ);
		Если ИДКолонкиПереноса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИДЗадачиКайтен Из МассивЗадачКайтен Цикл
			ДобавитьВЛог("Выполняется перенос в колонку " + ИДКолонкиПереноса, ИДЗадачиКайтен);
			АдресЗапроса = СтрШаблон("%1/api/latest/cards/%2", АдресКайтен, ИДЗадачиКайтен);
			ПараметрыЗапроса = Новый Структура("column_id", ИДКолонкиПереноса);
			ОтправитьЗапросВКайтен(АдресЗапроса, "PATCH", ПараметрыЗапроса);
			Приостановить(3000);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОбщиеМетоды

Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено)
	
	Если Структура = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ЗначениеПоУмолчанию;
	Если Структура.Свойство(Ключ, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьФайлJSON(Знач ПутьКФайлуJSON)
	
	Попытка
		ЧтениеТекста	= Новый ЧтениеТекста(ПутьКФайлуJSON, "UTF-8");
		СтрокаJSON		= ЧтениеТекста.Прочитать();
		ПарсерJSON		= Новый ПарсерJSON();
		Параметры		= ПарсерJSON.ПрочитатьJSON(СтрокаJSON);
	Исключение
		Ошибка			= ОписаниеОшибки();
		ВызватьИсключение "Не удалось прочитать настройки из файла:" + Ошибка;
	КонецПопытки;
	
	Возврат Параметры;
	
КонецФункции

Процедура ДобавитьВЛог(Текст, ИДЗадачи = Неопределено, ИДКолонки = Неопределено)
	
	Если ИДЗадачи <> Неопределено Тогда
		Если ИДКолонки <> Неопределено Тогда
			ШаблонСообщения	= "Колонка [%1] Задача [%2/%3]: %4";
			ТекстСообщения	= СтрШаблон(ШаблонСообщения, ИДКолонки, АдресКайтен, ИДЗадачи, Текст);
		Иначе
			ШаблонСообщения	= "Задача [%1/%2]: %3";
			ТекстСообщения	= СтрШаблон(ШаблонСообщения, АдресКайтен, ИДЗадачи, Текст);
		КонецЕсли;
	ИначеЕсли ИДКолонки <> Неопределено Тогда
		ШаблонСообщения	= "Колонка [%1]: %2";
		ТекстСообщения	= СтрШаблон(ШаблонСообщения, ИДКолонки, Текст);
	Иначе
		ТекстСообщения	= Текст;
	КонецЕсли;
	
	Сообщить(ТекстСообщения);
	
КонецПроцедуры

Процедура ДобавитьСтрокиТЗПоСоответствию(ТЗ, МассивСоответствий)
	
	Для Каждого СоответствиеЗначений Из МассивСоответствий Цикл
		НоваяСтрока = ТЗ.Добавить();
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			НоваяСтрока[Колонка.Имя] = СоответствиеЗначений.Получить(Колонка.Имя);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьДанныеВСтруктуру(ИсходныеДанные)
	
	Если ТипЗнч(ИсходныеДанные) = Тип("Структура") Тогда
		Возврат ИсходныеДанные;
	КонецЕсли;
	
	Если ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
		
		Результат = Новый Массив();
		
		Для Каждого Элемент Из ИсходныеДанные Цикл
			ДанныеЭлемента = ПреобразоватьДанныеВСтруктуру(Элемент);
			Результат.Добавить(ДанныеЭлемента);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если ТипЗнч(ИсходныеДанные) = Тип("Соответствие") Тогда
		
		Результат = Новый Структура();
		
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Тип("Структура"));
		МассивТипов.Добавить(Тип("Соответствие"));
		МассивТипов.Добавить(Тип("Массив"));
		Для Каждого КлючИЗначение Из ИсходныеДанные Цикл
			Значение = КлючИЗначение.Значение;
			Если МассивТипов.Найти(ТипЗнч(КлючИЗначение.Значение)) <> Неопределено Тогда
				Значение = ПреобразоватьДанныеВСтруктуру(КлючИЗначение.Значение);
			КонецЕсли;
			Результат.Вставить(КлючИЗначение.Ключ, Значение);
		КонецЦикла;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

Функция ИнициализироватьПарсер(АргументыКоманднойСтроки)
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	Парсер.ДобавитьИменованныйПараметр("--kaitenURL"	, "URL Кайтен");
	Парсер.ДобавитьИменованныйПараметр("--redmineURL"	, "URL Редмайн");
	Парсер.ДобавитьИменованныйПараметр("--kaitenToken"	, "Токен Кайтен");
	Парсер.ДобавитьИменованныйПараметр("--redmineAPIKEY", "API ключ Редмайн");
	Парсер.ДобавитьИменованныйПараметр("--config"		, "Путь к файлу настроек");
	Парсер.ДобавитьИменованныйПараметр("--redmineUsers"	, "Путь к файлу пользователей redmine");
	Парсер.ДобавитьИменованныйПараметр("--idCard"		, "ИД задачи Кайтен | Ссылка задачи Кайтен");
	
	ПараметрыКоманднойСтроки = Парсер.Разобрать(АргументыКоманднойСтроки);
	
	Возврат ПараметрыКоманднойСтроки;
	
КонецФункции

Процедура ИнициализироватьПараметрыЗапуска(Знач ПараметрыКоманднойСтроки)
	
	АдресКайтен					= ПараметрыКоманднойСтроки["--kaitenURL"];
	АдресРедмайн				= ПараметрыКоманднойСтроки["--redmineURL"];
	ТокенКайтен					= ПараметрыКоманднойСтроки["--kaitenToken"];
	КлючРедмайн					= ПараметрыКоманднойСтроки["--redmineAPIKEY"];
	ПутьНастроек				= ПараметрыКоманднойСтроки["--config"];
	ПутьНастроекПользователей	= ПараметрыКоманднойСтроки["--redmineUsers"];
	ИДЗадачиКайтенВх			= ПараметрыКоманднойСтроки["--idCard"];
	
	НастройкиИзФайла				= ПрочитатьФайлJSON(ПутьНастроек);
	НастройкиИзФайлаПользователей	= ПрочитатьФайлJSON(ПутьНастроекПользователей);
	
	МассивОбязательныхПараметров = Новый Массив();
	МассивОбязательныхПараметров.Добавить(АдресКайтен);
	МассивОбязательныхПараметров.Добавить(АдресРедмайн);
	МассивОбязательныхПараметров.Добавить(ТокенКайтен);
	МассивОбязательныхПараметров.Добавить(КлючРедмайн);
	МассивОбязательныхПараметров.Добавить(НастройкиИзФайла);
	МассивОбязательныхПараметров.Добавить(НастройкиИзФайлаПользователей);
	
	Для Каждого Параметр Из МассивОбязательныхПараметров Цикл
		Если Не ЗначениеЗаполнено(Параметр) Тогда
			ВызватьИсключение "Не заполнены обязательные параметры запуска!";
		КонецЕсли;
	КонецЦикла;
	
	ИнициализироватьНастройкиИзФайла();
	ИнициализироватьНастройкиИзФайлаПользователей();
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиИзФайла()
	
	ИДКолонокКайтен								= НастройкиИзФайла.Получить("ИДКолонокКайтен");
	ИДКолонокДляОбработки						= НастройкиИзФайла.Получить("ИДКолонокДляОбработки");
	УсловияДляОбработкиПереноса					= НастройкиИзФайла.Получить("УсловияДляОбработкиПереноса");
	ПользовательскиеПоляКайтен					= НастройкиИзФайла.Получить("ПользовательскиеПоляКайтен");
	ИДПроектаРедмайн							= НастройкиИзФайла.Получить("ИДПроектаРедмайн");
	ИДНовогоСтатусаРедмайн						= НастройкиИзФайла.Получить("ИДНовогоСтатусаРедмайн");
	ПриоритетРедмайнПоУмолчанию					= НастройкиИзФайла.Получить("ПриоритетРедмайнПоУмолчанию");
	СоответствиеТеговКайтенПриоритетамРедмайн	= НастройкиИзФайла.Получить("СоответствиеТеговКайтенПриоритетамРедмайн");
	КатегорииРедмайн							= НастройкиИзФайла.Получить("КатегорииРедмайн");
	ИДПользователяРедмайнДляНазначения			= НастройкиИзФайла.Получить("ИДПользователяРедмайнДляНазначения");
	ПользовательскиеПоляРедмайн					= НастройкиИзФайла.Получить("ПользовательскиеПоляРедмайн");
	СоответствиеТиповЗадачКайтенРедмайнТрекерам	= НастройкиИзФайла.Получить("СоответствиеТиповЗадачКайтенРедмайнТрекерам");
	АдресСозданияЗадачиРедмайн					= СтрШаблон("%1/issues.json", АдресРедмайн);
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиИзФайлаПользователей()
	
	ПользователиРедмайн						= НастройкиИзФайлаПользователей.Получить("ПользователиРедмайн");
	СоответствиеПользователейКайтенИРедмайн	= НастройкиИзФайлаПользователей.Получить("СоответствиеПользователейКайтенИРедмайн");
	
КонецПроцедуры

Процедура ИнициализироватьТаблицы()
	
	АдресЗапроса = СтрШаблон("%1/api/latest/users", АдресКайтен);
	ДанныеПользователей = ОтправитьЗапросВКайтен(АдресЗапроса, "GET");
	ПользователиКайтен = СформироватьТаблицуПользователей(ДанныеПользователей);
	
	ТаблицаСоответствияПользователей = СформироватьТаблицуСоответствияПользователей();
	
	ТаблицаВерсийРедмайн = СформироватьТаблицуВерсий();
	
КонецПроцедуры

#КонецОбласти